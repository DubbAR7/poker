package com.poker
 
import com.poker.PokerController.Game;
 
rule "New Game"
    when
        currentGame : Game( gameState == Game.NEW_GAME, currentGameState : gameState )
    then
        System.out.println("New Game");
        currentGame.newGame();
        currentGame.setGameState( Game.NEW_HAND );
        System.out.println("");
        update( currentGame );
end

rule "New Hand"
    when
        currentGame : Game( gameState == Game.NEW_HAND, currentGameState : gameState )
    then
        System.out.println( "New Hand" );
        currentGame.newHand();
        currentGame.setPrevBetOrCheck(false);
        currentGame.setCurrentBet(currentGame.getSmallBlind());
        currentGame.setGameState( Game.PREFLOP );
        System.out.println("Player Chips = " + currentGame.getPlayerChips());
        System.out.println("Agent Chips = " + currentGame.getAgentChips());
        System.out.println("");
        currentGame.printPlayerHand();
        System.out.println("");
        update( currentGame );
end

rule "Pre-Flop; Player Turn;"
    when
        currentGame : Game( gameState == Game.PREFLOP && turn == Game.PLAYER && !getAgentAllIn() && !getPlayerAllIn(), currentGameState : gameState )
    then
        System.out.println( "Pre Flop - Player Turn" );
        System.out.println("Player Chips = " + currentGame.getPlayerChips());
        System.out.println("Agent Chips = " + currentGame.getAgentChips());
        currentGame.playerBet(currentGame.getCurrentBet());
        System.out.println("");
        update( currentGame );
end

rule "Pre-Flop; Agent Turn;"
    when
        currentGame : Game( gameState == Game.PREFLOP && turn == Game.AGENT && !getAgentAllIn() && !getPlayerAllIn(), currentGameState : gameState )
    then
        System.out.println( "Pre Flop - Agent Turn" );
        currentGame.agentBet(currentGame.getCurrentBet());
        System.out.println("Player Chips = " + currentGame.getPlayerChips());
        System.out.println("Agent Chips = " + currentGame.getAgentChips());
        System.out.println("");
        update( currentGame );
end

rule "Flop"
    when
        currentGame : Game( gameState == Game.FLOPDEAL, currentGameState : gameState )
    then
    	System.out.println("______________________________________________________________________");
        currentGame.dealBoardCard();
        currentGame.dealBoardCard();
        currentGame.dealBoardCard();
        currentGame.printBoardCards();
        currentGame.setGameState(Game.FLOP);
        System.out.println("");
        update( currentGame );
end


rule "Flop; Player Turn;"
    when
        currentGame : Game( gameState == Game.FLOP && turn == Game.PLAYER && !getAgentAllIn() && !getPlayerAllIn(), currentGameState : gameState )
    then
        System.out.println( "Flop - Player Turn" );
        System.out.println("Player Chips = " + currentGame.getPlayerChips());
        System.out.println("Agent Chips = " + currentGame.getAgentChips());
        System.out.println("");
        currentGame.playerBet(currentGame.getCurrentBet());
        System.out.println("");
        update( currentGame );
end

rule "Flop; Agent Turn;"
    when
        currentGame : Game( gameState == Game.FLOP && turn == Game.AGENT && !getAgentAllIn() && !getPlayerAllIn(), currentGameState : gameState )
    then
        System.out.println( "Flop - Agent Turn" );
        currentGame.agentBet(currentGame.getCurrentBet());
        System.out.println("Player Chips = " + currentGame.getPlayerChips());
        System.out.println("Agent Chips = " + currentGame.getAgentChips());
        System.out.println("");
        update( currentGame );
end

rule "Turn"
    when
        currentGame : Game( gameState == Game.TURNDEAL, currentGameState : gameState )
    then
    	System.out.println("______________________________________________________________________");
        currentGame.dealBoardCard();
        currentGame.printBoardCards();
        currentGame.setGameState(Game.TURN);
        System.out.println("");
        update( currentGame );
end

rule "Turn; Player Turn;"
    when
        currentGame : Game( gameState == Game.TURN && turn == Game.PLAYER && !getAgentAllIn() && !getPlayerAllIn(), currentGameState : gameState )
    then
        System.out.println( "Turn - Player Turn" );
        System.out.println("Player Chips = " + currentGame.getPlayerChips());
        System.out.println("Agent Chips = " + currentGame.getAgentChips());
        System.out.println("");
        currentGame.playerBet(currentGame.getCurrentBet());
        System.out.println("");
        update( currentGame );
end

rule "Turn; Agent Turn;"
    when
        currentGame : Game( gameState == Game.TURN && turn == Game.AGENT && !getAgentAllIn() && !getPlayerAllIn(), currentGameState : gameState )
    then
        System.out.println( "Turn - Agent Turn" );
        currentGame.agentBet(currentGame.getCurrentBet());
        System.out.println("Player Chips = " + currentGame.getPlayerChips());
        System.out.println("Agent Chips = " + currentGame.getAgentChips());
        System.out.println("");
        update( currentGame );
end

rule "River"
    when
        currentGame : Game( gameState == Game.RIVERDEAL, currentGameState : gameState )
    then
    	System.out.println("______________________________________________________________________");
        currentGame.dealBoardCard();
        currentGame.printBoardCards();
        currentGame.setGameState(Game.RIVER);
        System.out.println("");
        update( currentGame );
end

rule "River; Player Turn;"
    when
        currentGame : Game( gameState == Game.RIVER && turn == Game.PLAYER && !getAgentAllIn() && !getPlayerAllIn(), currentGameState : gameState )
    then
        System.out.println( "River - Player Turn" );
        System.out.println("Player Chips = " + currentGame.getPlayerChips());
        System.out.println("Agent Chips = " + currentGame.getAgentChips());
        System.out.println("");
        currentGame.playerBet(currentGame.getCurrentBet());
        currentGame.printHand(Evaluator.bestHand(currentGame.getPlayerHand(), currentGame.getBoard()));
        System.out.println("");
        update( currentGame );
end

rule "River; Agent Turn;"
    when
        currentGame : Game( gameState == Game.RIVER && turn == Game.AGENT && !getAgentAllIn() && !getPlayerAllIn(), currentGameState : gameState )
    then
        System.out.println( "River - Agent Turn" );
        currentGame.agentBet(currentGame.getCurrentBet());
        System.out.println("Player Chips = " + currentGame.getPlayerChips());
        System.out.println("Agent Chips = " + currentGame.getAgentChips());
        System.out.println("");
        update( currentGame );
end

rule "AllIn"
    when
        currentGame : Game( getAgentAllIn() || getPlayerAllIn(), currentGameState : gameState )
    then
    	for(int i = 5 - currentGame.getBoardSize(); i > 0; i--){
        	currentGame.dealBoardCard();
        }
        currentGame.printBoardCards();
        currentGame.setGameState(Game.SHOWDOWN);
        System.out.println("Player Chips = " + currentGame.getPlayerChips());
        System.out.println("Agent Chips = " + currentGame.getAgentChips());
        System.out.println("");
        update( currentGame );
end

rule "Showdown"
    when
        currentGame : Game( gameState == Game.SHOWDOWN, currentGameState : gameState )
    then
    	System.out.println("######################################################################");
        System.out.println( "Showdown" );
        System.out.println("Player Hand:");
        currentGame.printHand(Evaluator.bestHand(currentGame.getPlayerHand(), currentGame.getBoard()));
        System.out.println("");
        System.out.println("Agent Hand:");
        currentGame.printHand(Evaluator.bestHand(currentGame.getAgentHand(), currentGame.getBoard()));
        System.out.println("");
        if(Evaluator.valueHand(Evaluator.bestHand(currentGame.getPlayerHand(), currentGame.getBoard())) > Evaluator.valueHand(Evaluator.bestHand(currentGame.getAgentHand(), currentGame.getBoard()))){
        	currentGame.playerWin();
        }
        else if(Evaluator.valueHand(Evaluator.bestHand(currentGame.getPlayerHand(), currentGame.getBoard())) == Evaluator.valueHand(Evaluator.bestHand(currentGame.getAgentHand(), currentGame.getBoard()))){
        	currentGame.splitPot();
        }
        else{
        	currentGame.agentWin();
        }
        currentGame.setGameState( Game.NEW_HAND );
        System.out.println("Player Chips = " + currentGame.getPlayerChips());
        System.out.println("Agent Chips = " + currentGame.getAgentChips());
        System.out.println("######################################################################");
        System.out.println("");
        update( currentGame );
end